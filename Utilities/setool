#!/usr/bin/env perl
use strict;
use warnings;
use Getopt::Long qw /:config pass_through require_order /;
use PHEDEX::Core::Loader;
use PHEDEX::Core::Util ( qw / str_hash / );
use PHEDEX::Namespace;

my ($loader,$module,$interface,$ns);
my ($verbose,$debug,$terse);
my (@pfn,$pfnlist,$result,$command);

sub usage
{
  print <<EOF;

  Usage:

  setool --pfnlist PFNLIST INTERFACE {OPTIONS} [COMMAND]
 
  PFNLIST is a file containing full PFNs as found in your storage
  element, one pfn per line.
  If PFNLIST is given as '-', the script will read from stdin.
  Gzipped (*.gz) or bzipped (*.bz2) files can be read directly,
  allowing for compact filelists.

  INTERFACE is the protocol for accessing the SE.

  OPTIONS are --verbose, --debug, --help, and anything else that the
  interface might support. Use --help per interface to find out more.

  COMMAND is an operation against the SE that the INTERFACE supports,
  such as 'stat', 'is_migrated' etc. The --help option for the interface
  will list them.

  Known interface protocols in this installation are:
EOF
  print " '",join("', '", grep (!/\//,sort keys %{$loader->Commands})),"'\n\n";
  exit 0;
}

$loader = PHEDEX::Core::Loader->new( NAMESPACE => 'PHEDEX::Namespace',
				     REJECT    => [ qw / common namespace / ] );

GetOptions(
           "pfnlist=s"      => \$pfnlist,
           "verbose|v+"     => \$verbose,
           "debug+"         => \$debug,
           "help|h"         => sub { &usage() }
	  );

$interface = shift;
die "INTERFACE argument must be specified\n" unless $interface;
$module = $loader->Load($interface);
$ns = $module->new();
if ( $pfnlist )
{
  if ( $pfnlist =~ m%.gz$% )
  { open PFN, "cat $pfnlist | gzip -d - |" or die "open: $pfnlist: $!\n"; }
  elsif ( $pfnlist =~ m%.bz2$% )
  { open PFN, "cat $pfnlist | bzip2 -d - |" or die "open: $pfnlist: $!\n"; }
  elsif ( $pfnlist =~ m%^-$% )
  { *PFN = *STDIN; }
  else
  { open PFN, "<$pfnlist" or die "open: $pfnlist: $!\n"; }
  while ( <PFN> )
  {
    chomp;
    $debug && print "Read: $_\n";;
    push @pfn, $_;
  }
}

while ( $command = shift @ARGV )
{
  foreach my $f ( @pfn )
  {
    $result = $ns->$command($f);
    print "$f $command = ",str_hash($result),"\n";
  }
}
